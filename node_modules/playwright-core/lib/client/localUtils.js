"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LocalUtils = void 0;
var _channelOwner = require("./channelOwner");
var _connection = require("./connection");
var localUtils = _interopRequireWildcard(require("../utils/localUtils"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class LocalUtils extends _channelOwner.ChannelOwner {
  constructor(parent, type, guid, initializer) {
    super(parent, type, guid, initializer);
    this.devices = void 0;
    this._harBackends = new Map();
    this._stackSessions = new Map();
    this.markAsInternalType();
    this.devices = {};
    for (const {
      name,
      descriptor
    } of initializer.deviceDescriptors) this.devices[name] = descriptor;
  }
  async zip(params) {
    return await localUtils.zip(this._platform, this._stackSessions, params);
  }
  async harOpen(params) {
    return await localUtils.harOpen(this._harBackends, params);
  }
  async harLookup(params) {
    return await localUtils.harLookup(this._harBackends, params);
  }
  async harClose(params) {
    return await localUtils.harClose(this._harBackends, params);
  }
  async harUnzip(params) {
    return await localUtils.harUnzip(params);
  }
  async tracingStarted(params) {
    return await localUtils.tracingStarted(this._stackSessions, params);
  }
  async traceDiscarded(params) {
    return await localUtils.traceDiscarded(this._platform, this._stackSessions, params);
  }
  async addStackToTracingNoReply(params) {
    return await localUtils.addStackToTracingNoReply(this._stackSessions, params);
  }
  async connect(params) {
    const {
      pipe,
      headers: connectHeaders
    } = await this._channel.connect(params);
    const closePipe = () => this._wrapApiCall(() => pipe.close().catch(() => {}), /* isInternal */true);
    const connection = new _connection.Connection(this, this._platform, this._instrumentation, connectHeaders);
    connection.markAsRemote();
    connection.on('close', closePipe);
    let closeError;
    const onPipeClosed = reason => {
      connection.close(reason || closeError);
    };
    pipe.on('closed', params => onPipeClosed(params.reason));
    connection.onmessage = message => this._wrapApiCall(() => pipe.send({
      message
    }).catch(() => onPipeClosed()), /* isInternal */true);
    pipe.on('message', ({
      message
    }) => {
      try {
        connection.dispatch(message);
      } catch (e) {
        closeError = String(e);
        closePipe();
      }
    });
    return connection;
  }
}
exports.LocalUtils = LocalUtils;