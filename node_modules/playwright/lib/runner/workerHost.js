"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WorkerHost = void 0;
var fs = _interopRequireWildcard(require("fs"));
var path = _interopRequireWildcard(require("path"));
var _server = require("playwright-core/lib/server");
var _processHost = require("./processHost");
var _ipc = require("../common/ipc");
var _folders = require("../isomorphic/folders");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Copyright Microsoft Corporation. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

let lastWorkerIndex = 0;
class WorkerHost extends _processHost.ProcessHost {
  constructor(testGroup, parallelIndex, config, extraEnv, outputDir) {
    const workerIndex = lastWorkerIndex++;
    super(require.resolve('../worker/workerMain.js'), `worker-${workerIndex}`, {
      ...extraEnv,
      FORCE_COLOR: '1',
      DEBUG_COLORS: process.env.DEBUG_COLORS === undefined ? '1' : process.env.DEBUG_COLORS
    });
    this.parallelIndex = void 0;
    this.workerIndex = void 0;
    this._hash = void 0;
    this._params = void 0;
    this._didFail = false;
    this.workerIndex = workerIndex;
    this.parallelIndex = parallelIndex;
    this._hash = testGroup.workerHash;
    this._params = {
      workerIndex: this.workerIndex,
      parallelIndex,
      repeatEachIndex: testGroup.repeatEachIndex,
      projectId: testGroup.projectId,
      config,
      artifactsDir: path.join(outputDir, (0, _folders.artifactsFolderName)(workerIndex))
    };
  }
  async start() {
    await fs.promises.mkdir(this._params.artifactsDir, {
      recursive: true
    });
    return await this.startRunner(this._params, {
      onStdOut: chunk => this.emit('stdOut', (0, _ipc.stdioChunkToParams)(chunk)),
      onStdErr: chunk => this.emit('stdErr', (0, _ipc.stdioChunkToParams)(chunk))
    });
  }
  async onExit() {
    await (0, _server.removeFolders)([this._params.artifactsDir]);
  }
  async stop(didFail) {
    if (didFail) this._didFail = true;
    await super.stop();
  }
  runTestGroup(runPayload) {
    this.sendMessageNoReply({
      method: 'runTestGroup',
      params: runPayload
    });
  }
  hash() {
    return this._hash;
  }
  didFail() {
    return this._didFail;
  }
}
exports.WorkerHost = WorkerHost;