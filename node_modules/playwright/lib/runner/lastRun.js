"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LastRunReporter = void 0;
var fs = _interopRequireWildcard(require("fs"));
var path = _interopRequireWildcard(require("path"));
var _projectUtils = require("./projectUtils");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Copyright Microsoft Corporation. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class LastRunReporter {
  constructor(config) {
    this._config = void 0;
    this._lastRunFile = void 0;
    this._suite = void 0;
    this._config = config;
    const [project] = (0, _projectUtils.filterProjects)(config.projects, config.cliProjectFilter);
    if (project) this._lastRunFile = path.join(project.project.outputDir, '.last-run.json');
  }
  async filterLastFailed() {
    if (!this._lastRunFile) return;
    try {
      const lastRunInfo = JSON.parse(await fs.promises.readFile(this._lastRunFile, 'utf8'));
      this._config.lastFailedTestIdMatcher = id => lastRunInfo.failedTests.includes(id);
    } catch {}
  }
  version() {
    return 'v2';
  }
  printsToStdio() {
    return false;
  }
  onBegin(suite) {
    this._suite = suite;
  }
  async onEnd(result) {
    var _this$_suite;
    if (!this._lastRunFile || this._config.cliListOnly) return;
    await fs.promises.mkdir(path.dirname(this._lastRunFile), {
      recursive: true
    });
    const failedTests = (_this$_suite = this._suite) === null || _this$_suite === void 0 ? void 0 : _this$_suite.allTests().filter(t => !t.ok()).map(t => t.id);
    const lastRunReport = JSON.stringify({
      status: result.status,
      failedTests
    }, undefined, 2);
    await fs.promises.writeFile(this._lastRunFile, lastRunReport);
  }
}
exports.LastRunReporter = LastRunReporter;